<?php

/**
 * @file
 * Main functions and hook implementations of the language negotiation module.
 */

if (!defined('MULTISITE_DRUPAL_LANGUAGE_NEGOCIATION_URL_SUFFIX')) {

  define('MULTISITE_DRUPAL_LANGUAGE_NEGOCIATION_URL_SUFFIX', 'locale-url-suffix');
}

/**
 * Implements hook_language_negotiation_info().
 */
function multisite_drupal_language_negociation_language_negotiation_info() {
  $file = drupal_get_path('module', 'multisite_drupal_language_negociation') . '/multisite_drupal_language_negociation.module';
  $providers = array();
  $providers[MULTISITE_DRUPAL_LANGUAGE_NEGOCIATION_URL_SUFFIX] = array(
    'types' => array(
      LANGUAGE_TYPE_CONTENT,
      LANGUAGE_TYPE_INTERFACE,
      LANGUAGE_TYPE_URL,
    ),
    'callbacks' => array(
      'language' => 'multisite_language_provider_callback',
      'url_rewrite' => 'multisite_url_rewrite_callback',
      'switcher' => 'multisite_language_switcher_url',
    ),
    'file' => $file,
    'weight' => -8,
    'name' => t('URL suffix'),
    'description' => t('Determine the language from the URL path suffix.'),
    'config' => 'admin/config/regional/language/configure/url-suffix',
  );
  return $providers;
}

/**
 * Implements hook_menu().
 */
function multisite_drupal_language_negociation_menu() {
  $items['admin/config/regional/language/configure/url-suffix'] = array(
    'title' => 'Language suffix delimiter',
    'description' => 'Settings to choose the language suffix delimiter in the url',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('multisite_drupal_language_negociation_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * Form constructor for the language negotiation form.
 */
function multisite_drupal_language_negociation_form($form, &$form_state) {
  $form['language_suffix_delimiter'] = array(
    '#type' => 'textfield',
    '#maxlength' => 3,
    '#title' => t('language suffix delimiter'),
    '#default_value' => variable_get('language_suffix_delimiter', '_'),
    '#description' => 'Ex : character like an underscore or hyphen..',
  );
  return system_settings_form($form);
}

/**
 * Implements hook_language_types_info_alter().
 */
function multisite_drupal_language_negociation_language_types_info_alter(&$language_types) {
  $defined_providers = language_negotiation_info();
  if (isset($defined_providers[MULTISITE_DRUPAL_LANGUAGE_NEGOCIATION_URL_SUFFIX])) {
    // Put the 'locale-url-suffix' as priority provider for language type URL.
    array_unshift($language_types[LANGUAGE_TYPE_URL]['fixed'], 'locale-url-suffix');
  }
}

/**
 * Implements hook_form_alter().
 */
function multisite_drupal_language_negociation_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    case 'locale_languages_configure_form':
      $language_negociation = variable_get('language_negotiation_language');

      // Disable URL method if URL-suffix method is enabled.
      if (isset($language_negociation['locale-url-suffix'])) {
        $form['language']['enabled']['locale-url']['#disabled'] = TRUE;
      }
      break;
  }
  if (substr($form_id, -9) == 'node_form') {
    $form['#after_build'][] = '_multisite_drupal_language_negociation_node_form_alter';
  }
}

/**
 * Form after build handler for altering the language configuration form.
 *
 * @see multisite_drupal_language_negociation_form_alter()
 */
function _multisite_drupal_language_negociation_node_form_alter(&$form, $form_state) {
  $language_default = language_default();
  // Hide all languages except the neutral language and default language in the
  // node source form.
  if (isset($form_state['node'])) {
    // Check if node source or new node.
    if ($form_state['node']->language == LANGUAGE_NONE || $form_state['node']->language == $language_default->language) {
      if (isset($form['language']['#options'])) {
        foreach ($form['language']['#options'] as $lg => $language) {
          if ($lg != $language_default->language && $lg != LANGUAGE_NONE) {
            unset($form['language']['#options'][$lg]);
          }
        }
      }
    }
  }
  return $form;
}

/**
 * Implements hook_field_group_pre_render().
 */
function multisite_drupal_language_negociation_field_group_pre_render(& $element, $group, & $form) {
  // Hide all language except neutral language and default language in the field
  // "language" place in field_groups.
  if (isset($element['language']['#options'])) {
    $language_default = language_default();
    // Check if node source or new node.
    if ($form['#node']->language == LANGUAGE_NONE || $form['#node']->language == $language_default->language) {
      foreach ($element['language']['#options'] as $lg => $language) {
        if ($lg != $language_default->language && $lg != LANGUAGE_NONE) {
          unset($element['language']['#options'][$lg]);
        }
      }
    }
  }
}

/**
 * Implements hook_views_query_alter().
 */
function multisite_drupal_language_negociation_views_query_alter(&$view, &$query) {
  global $language;

  // Apply the nodes selection for views regarding the multisite language
  // negociation.
  $language_default = language_default();
  if (variable_get('language_negociation_views', 0)) {
    // Alter all the nodes views except the views with the 'non-multilingual'
    // tag.
    if (!preg_match('/non-multilingual/', $view->tag) && $view->base_table == 'node') {
      // Add a relationship to get the translation of a node in the current
      // language.
      $join = new views_join();
      $join->construct('node', 'node', 'nid', 'tnid', array(), 'LEFT');
      $join->extra = array(array('field' => 'language', 'value' => $language->language));
      $query->add_relationship('node_node', $join, 'node');

      // Conditions for the language selection and fallbacks.
      $query->add_where(0, "
        (node.language IN ('und', '$language->language'))
        OR (node.tnid = node.nid AND node_node.status = '0')
        OR (node.tnid = node.nid AND node_node.language IS NULL)
        OR (node.language = '$language_default->language' AND node.tnid = 0)
      ", array(), 'formula');
    }
  }
}

/**
 * Callback functions for the multisite language negotiation providers.
 */
function multisite_language_provider_callback($languages) {
  $language_url = FALSE;
  if (!language_negotiation_get_any(MULTISITE_DRUPAL_LANGUAGE_NEGOCIATION_URL_SUFFIX)) {
    return $language_url;
  }

  // $_GET['q'] might not be available at this time, because path initialization
  // runs after the language bootstrap phase.
  list($language, $_GET['q']) = language_url_split_suffix(isset($_GET['q']) ? $_GET['q'] : NULL, $languages);
  if ($language !== FALSE) {
    $language_url = $language->language;
  }

  return $language_url;
}

/**
 * Callback to rewrite URLs for the URL language provider.
 *
 * @see hook_language_negotiation_info()
 */
function multisite_url_rewrite_callback(&$path, &$options) {
  global $language_url;

  $delimiter = variable_get('language_suffix_delimiter', '_');

  $language_list = language_list('enabled');
  $languages = array_flip(array_keys($language_list[1]));

  // Language can be passed as an option, or we go for current URL language.
  if (!isset($options['language'])) {
    if (isset($options['attributes']['lang'])) {
      $options['language'] = $language_list[1][$options['attributes']['lang']];
    }
    else {
      $options['language'] = $language_url;
    }
  }
  // We allow only enabled languages here.
  elseif (!isset($languages[$options['language']->language])) {
    unset($options['language']);
    return;
  }

  $path = drupal_get_path_alias(empty($path) ? variable_get('site_frontpage', 'node') : $path, $options['language']->language);
  // Handle the homepage URL.
  if ($path == '<front>' || $path == '') {
    $path = variable_get('site_frontpage', 'node');
  }

  $path .= $delimiter . $options['language']->prefix;

  $options['alias'] = TRUE;
}

/**
 * Extract the suffix from the path.
 */
function language_url_split_suffix($path, $languages) {
  $delimiter = variable_get('language_suffix_delimiter', '_');
  $args = empty($path) ? array() : explode($delimiter, $path);
  $suffix = array_pop($args);
  // Handle if there are extra parameters after the suffix.
  $extra_params = explode("/", $suffix);
  $suffix = array_shift($extra_params);

  // Search prefix within enabled languages.
  foreach ($languages as $language) {
    if (!empty($language->prefix) && $language->prefix == $suffix) {
      // Rebuild $path with the language removed.
      $path = implode($delimiter, $args);
      // Handle the path homepage.
      $path = ($path == 'index') ? '' : $path;
      // Add extra params after suffix.
      if (count($extra_params) > 0) {
        $path .= "/" . implode("/", $extra_params);
      }
      return array($language, $path);
    }
  }
  return array(FALSE, $path);
}

/**
 * Language switcher callback.
 *
 * @see hook_language_negotiation_info()
 */
function multisite_language_switcher_url($type, $path) {
  $languages = language_list('enabled');
  $links = array();
  foreach ($languages[1] as $language) {
    $links[$language->language] = array(
      'href' => $path,
      'title' => $language->native,
      'language' => $language,
      'attributes' => array('class' => array('language-link')),
    );
  }
  return $links;
}
